package com.qichen.code2;

/**
 * 多态性 Polymorphism
 * 只适用于方法，不适用于属性
 * @author qichen
 * @date 2019/10/27
 * @since JDK1.8
 */
/*
多态性，是面向对象中最重要的概念， 在Java中的体现：
        对象的多态性：父类的引用指向子类的对象
    可以直接应用在抽象类和接口上
Java引用变量有两个类型： 编译时类型和运行时类型。 编译时类型由声明
        该变量时使用的类型决定， 运行时类型由实际赋给该变量的对象决定。 简
        称： 编译时， 看左边；运行时， 看右边。
    若编译时类型和运行时类型不一致， 就出现了对象的多态性(Polymorphism)
    多态情况下， “看左边” ： 看的是父类的引用（父类中不具备子类特有的方法）
        “看右边” ： 看的是子类的对象（实际运行的是子类重写父类的方法）
 */
/*
    对象的多态 —在Java中,子类的对象可以替代父类的对象使用
        一个变量只能有一种确定的数据类型
        一个引用类型变量可能指向(引用)多种不同类型的对象
            Person p = new Student();
            Object o = new Person();//Object类型的变量o， 指向Person类型的对象
            o = new Student(); //Object类型的变量o， 指向Student类型的对象
    子类可看做是特殊的父类， 所以父类类型的引用可以指向子类的对象：向
        上转型(upcasting)。
 */
/*
     一个引用类型变量如果声明为父类的类型，但实际引用的是子类
        对象，那么该变量就不能再访问子类中添加的属性和方法
        Student m = new Student();
        m.school = “pku”; //合法,Student类有school成员变量
        Person e = new Student();
        e.school = “pku”; //非法,Person类没有school成员变量
    属性是在编译时确定的，编译时e为Person类型，没有school成员变量，因而编
        译错误。

 */
public class Polymorphism {

}

/*
     多态作用：
         提高了代码的通用性，常称作接口重用
     前提：
         需要存在继承或者实现关系
         有方法的重写
     成员方法：
         编译时：要查看引用变量所声明的类中是否有所调用的方法。
         运行时： 调用实际new的对象所属的类中的重写方法。
     成员变量：
         不具备多态性，只看引用变量所声明的类。
 */
